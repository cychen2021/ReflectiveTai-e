Points-to sets of all variables
[]:<ArgsRefine: java.lang.Class class$(java.lang.String)>/name -> [[]:ConstantObj{java.lang.String: "B"}, []:ConstantObj{java.lang.String: "java.lang.Object"}]
[]:<ArgsRefine: java.lang.Class class$(java.lang.String)>/temp$0 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: java.lang.Class class$(java.lang.String)>/temp$1 -> [[]:MergedObj{<Merged java.lang.NoClassDefFoundError>}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-0 -> []
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-1 -> []
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-2 -> []
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-3 -> [[]:ConstantObj{java.lang.String: "hello"}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-4 -> [[]:ConstantObj{java.lang.String: "hello"}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-5 -> []
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-6 -> [[]:ConstantObj{java.lang.String: "hello"}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%solar-transformation-fresh-arg-7 -> []
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%stringconst0 -> [[]:ConstantObj{java.lang.String: "B"}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%stringconst1 -> [[]:ConstantObj{java.lang.String: "print"}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/%stringconst4 -> [[]:ConstantObj{java.lang.String: "hello"}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/args -> [[]:NewObj{<ArgsRefine: void invokePrint(java.lang.Class[])>[17@L12] newarray java.lang.Object[%intconst2]}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/b -> [[]:NewObj{<ArgsRefine: void invokePrint(java.lang.Class[])>[13@L11] new B}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/paramTypes -> [[]:NewObj{<ArgsRefine: void main(java.lang.String[])>[1@L6] newarray java.lang.Class[%intconst0]}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/print -> [[]:MethodMetaObj{alloc=MethodMetaObj{baseClass=B, signature=SignatureRecord[methodName=print, paramTypes=null, returnType=null]},type=java.lang.reflect.Method}, []:MethodMetaObj{alloc=MethodMetaObj{baseClass=java.lang.Object, signature=SignatureRecord[methodName=print, paramTypes=null, returnType=null]},type=java.lang.reflect.Method}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/temp$0 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/temp$1 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/temp$2 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/temp$3 -> [[]:MethodMetaObj{alloc=MethodMetaObj{baseClass=B, signature=SignatureRecord[methodName=print, paramTypes=null, returnType=null]},type=java.lang.reflect.Method}, []:MethodMetaObj{alloc=MethodMetaObj{baseClass=java.lang.Object, signature=SignatureRecord[methodName=print, paramTypes=null, returnType=null]},type=java.lang.reflect.Method}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/temp$4 -> [[]:NewObj{<ArgsRefine: void invokePrint(java.lang.Class[])>[13@L11] new B}]
[]:<ArgsRefine: void invokePrint(java.lang.Class[])>/temp$5 -> [[]:NewObj{<ArgsRefine: void invokePrint(java.lang.Class[])>[17@L12] newarray java.lang.Object[%intconst2]}]
[]:<ArgsRefine: void main(java.lang.String[])>/%stringconst1 -> [[]:ConstantObj{java.lang.String: "java.lang.Object"}]
[]:<ArgsRefine: void main(java.lang.String[])>/args -> [[]:EntryPointObj{alloc=<main-arguments>,type=java.lang.String[] in <ArgsRefine: void main(java.lang.String[])>}]
[]:<ArgsRefine: void main(java.lang.String[])>/temp$0 -> [[]:NewObj{<ArgsRefine: void main(java.lang.String[])>[1@L6] newarray java.lang.Class[%intconst0]}]
[]:<ArgsRefine: void main(java.lang.String[])>/temp$1 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void main(java.lang.String[])>/temp$2 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void main(java.lang.String[])>/temp$3 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void main(java.lang.String[])>/temp$4 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void main(java.lang.String[])>/temp$5 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<ArgsRefine: void main(java.lang.String[])>/temp$6 -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
[]:<B: void <init>()>/%this -> [[]:NewObj{<ArgsRefine: void invokePrint(java.lang.Class[])>[13@L11] new B}]
[]:<B: void print(java.lang.Object,java.lang.Object)>/%stringconst0 -> [[]:ConstantObj{java.lang.String: "B.print(Object,Object)"}]
[]:<B: void print(java.lang.Object,java.lang.Object)>/%this -> [[]:NewObj{<ArgsRefine: void invokePrint(java.lang.Class[])>[13@L11] new B}]
[]:<B: void print(java.lang.Object,java.lang.Object)>/o1 -> [[]:ConstantObj{java.lang.String: "hello"}]
[]:<B: void print(java.lang.Object,java.lang.Object)>/o2 -> [[]:ConstantObj{java.lang.String: "hello"}]
[]:<B: void print(java.lang.Object,java.lang.Object)>/temp$0 -> []

Points-to sets of all static fields
<ArgsRefine: java.lang.Class class$B> -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
<ArgsRefine: java.lang.Class class$java$lang$Object> -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]
<java.lang.System: java.io.PrintStream out> -> []

Points-to sets of all instance fields

Points-to sets of all array indexes
[]:EntryPointObj{alloc=<main-arguments>,type=java.lang.String[] in <ArgsRefine: void main(java.lang.String[])>}[*] -> [[]:EntryPointObj{alloc=<main-arguments-element>,type=java.lang.String in <ArgsRefine: void main(java.lang.String[])>}]
[]:NewObj{<ArgsRefine: void invokePrint(java.lang.Class[])>[17@L12] newarray java.lang.Object[%intconst2]}[*] -> [[]:ConstantObj{java.lang.String: "hello"}]
[]:NewObj{<ArgsRefine: void main(java.lang.String[])>[1@L6] newarray java.lang.Class[%intconst0]}[*] -> [[]:ClassMetaObj{alloc=ClassMetaObj{knownClass=B},type=java.lang.Class}, []:ClassMetaObj{alloc=ClassMetaObj{knownClass=java.lang.Object},type=java.lang.Class}]

